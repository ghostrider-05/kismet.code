import { 
    type LocalInstalledClassesDiff, 
    type LocalInstalledClassSummary, 
    compareLocalInstallation, 
    compareClasses 
} from "./compare.js";

import { RawUnrealClass, type RawUnrealClassCompareResult } from "./internals/comparer.js";
import { UnrealClassesComparedFormatter } from "./internals/format.js";
import { extractSourceFile } from "./internals/parse.js";

interface LocalClassesChangelogOptions {
    title?: string; 
    description?: string;
    difference?: {
        includeKismet?: boolean;
    }
}

export type {
    LocalClassesChangelogOptions,
    LocalInstalledClassesDiff,
    LocalInstalledClassSummary,
}

export class LocalClassesInstallation {
    public readonly extracted: { 
        path: string; 
        packageNames: string[]; 
        includeDiff?: boolean 
    } | undefined

    /**
     * 
     * @param path The absolute path to the `\Src\` folder
     * @param extracted The absolute path to the extracted folder from the AssetExtraction tool and the packages to use to compare from this path
     */
    constructor (
        public readonly path: string, 
        extracted?: { 
            path: string; 
            packageNames?: string[]; 
            includeDiff?: boolean 
        }
    ) {
        this.extracted = extracted ? {
            path: extracted.path,
            packageNames: extracted.packageNames ?? [],
            includeDiff: extracted.includeDiff
        } : undefined
    }

    private static formatKismetClasses (cls: LocalInstalledClassSummary[]) {
        const filterSeqObjects = (classes: LocalInstalledClassSummary[]) => {
            return classes.filter(([, name]) => name.match(/^Seq(Act|Cond|Event|Var)_/) != null)
        }

        return this.formatClasses(filterSeqObjects(cls))
    }

    private static formatClasses (cls: LocalInstalledClassSummary[]) {
        const formatList = (classes: LocalInstalledClassSummary[]) => {
            return classes.map(([p, name, state]) => `${state === 'added' ? '+' : '-'} ${p}.${name.split('.')[0]}`).join('\n')
        }

        return formatList(cls)
    }

    /**
     * Create a raw class from a class definition
     * @param absolutePath The path to the file of the class definition
     * @param Package Overwrite the package to use for the archetype. If no package is found in the path, it will throw an error
     */
    public static extractSourceFile = extractSourceFile

    /**
     * Compare two UnrealScript classes
     * @param a Local class file
     * @param b New class file to compare to
     */
    public static compareUnrealClasses (a: RawUnrealClass, b: RawUnrealClass): RawUnrealClassCompareResult {
        return compareClasses(a, b)
    }

    private static formatClassDiff (diff: RawUnrealClassCompareResult): string {
        return new UnrealClassesComparedFormatter(diff).toString(2, 3)
    }

    public static createChangelog (diff: LocalInstalledClassesDiff, options?: LocalClassesChangelogOptions) {
        const createDetails = (summary: string, content: string) => `<details>\n<summary>${summary}</summary>\n\n\`\`\`diff\n${content}\n\`\`\`\n\n</details>`

        options ??= {}
        options.title ??= 'Changelog'
        options.description ??= 'Changes between an installation with dummy classes and autogenerated dummy classes'

        const formattedClasses = this.formatClasses(diff.summary)
        const formattedKismet = options.difference?.includeKismet
            ? createDetails('Kismet classes', this.formatKismetClasses(diff.summary_kismet)) + '\n\n'
            : ''

        const classDiff = diff.classes
            .map(c => `${LocalClassesInstallation.formatClassDiff(c)}`)
            .join('\n')

        return `# ${options.title}\n\n${options.description}\n\n## Classes\n\n${formattedKismet}${createDetails('All classes', formattedClasses)}\n\n${classDiff}`
    }

    public formatClasses (diff: LocalInstalledClassesDiff, type?: 'all' | 'kismet', format?: 'string' | 'json'): string;
    public formatClasses (diff: LocalInstalledClassesDiff, type: 'all' | 'kismet', format?: 'string' | 'json'): string;
    public formatClasses (diff: LocalInstalledClassesDiff, type: 'all' | 'kismet', format: 'string'): string;
    public formatClasses (diff: LocalInstalledClassesDiff, type: 'all' | 'kismet', format: 'json'): Record<LocalInstalledClassSummary[2], [string, string][]>;
    public formatClasses (diff: LocalInstalledClassesDiff, type?: 'all' | 'kismet', format?: 'string' | 'json'): string | Record<LocalInstalledClassSummary[2], [string, string][]> {
        const summary = type === 'kismet' ? diff.summary_kismet : diff.summary
        const filter = (nodes: LocalInstalledClassSummary[], type: 'added' | 'deleted') => {
            return nodes
                .filter(node => node[2] === type)
                .map(node => [node[0], node[1]] as [string, string])
        }

        const formatted =  {
            added: filter(summary, 'added'),
            deleted: filter(summary, 'deleted'),
        }

        return format === 'json' ? formatted : JSON.stringify(formatted)
    }

    public compare (autogeneratedAbsolutePath: string): LocalInstalledClassesDiff {
        if (this.extracted) this.extracted.packageNames ??= []

        return compareLocalInstallation(
            this.path, 
            autogeneratedAbsolutePath,  
            (result) => new UnrealClassesComparedFormatter(result).toString(2, 3).trim().length > 0,
            this.extracted
        )
    }
}