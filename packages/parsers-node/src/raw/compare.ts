import { checkFiles, combineChecks } from "./internals/checks.js"
import {
    UnrealClassesComparer,
    type RawUnrealClass,
    type RawUnrealClassCompareResult,
} from "./internals/comparer.js"

export type LocalInstalledClassSummary = [Package: string, name: string, state: 'added' | 'deleted']

export interface LocalInstalledClassesDiff {
    /** @deprecated */
    files: {
        added: [Package: string, name: string][]
        deleted: [Package: string, name: string][]
    }
    summary: LocalInstalledClassSummary[]
    summary_kismet: LocalInstalledClassSummary[]
    classes: RawUnrealClassCompareResult[]
}

export function compareClasses (a: RawUnrealClass, b: RawUnrealClass) {
    return new UnrealClassesComparer(a, b).compare()
}

export function compareLocalInstallation (
    localAbsolutePath: string, 
    autogeneratedAbsolutePath: string, 
    checkIfNotEmptyClass: (result: RawUnrealClassCompareResult) => boolean,
    RLPackageOptions?: {
        path: string
        packageNames: string[] 
        includeDiff?: boolean 
    },
): LocalInstalledClassesDiff {
    const localCheck = checkFiles(
        autogeneratedAbsolutePath, 
        localAbsolutePath,
        checkIfNotEmptyClass,
        { checkDeleted: true, path: RLPackageOptions?.path, includeDiff: true }
    )

    if (RLPackageOptions?.path) {
        const latestCheck = checkFiles(
            RLPackageOptions.path,
            localAbsolutePath,
            checkIfNotEmptyClass,
            { 
                checkDeleted: false, 
                checkDeletedFolders: true,
                path: RLPackageOptions.path,
                includeDiff: RLPackageOptions.includeDiff, 
                filter: (n) => RLPackageOptions.packageNames.includes(n),
            } 
        )

        return combineChecks(localCheck, latestCheck)
    } else return combineChecks(localCheck)
}
